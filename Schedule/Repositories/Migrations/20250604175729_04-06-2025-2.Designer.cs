// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250604175729_04-06-2025-2")]
    partial class _040620252
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentWorker", b =>
                {
                    b.Property<int>("departmentsid")
                        .HasColumnType("integer");

                    b.Property<int>("workersid")
                        .HasColumnType("integer");

                    b.HasKey("departmentsid", "workersid");

                    b.HasIndex("workersid");

                    b.ToTable("DepartmentWorker");
                });

            modelBuilder.Entity("JobTitleReception", b =>
                {
                    b.Property<int>("receptionsid")
                        .HasColumnType("integer");

                    b.Property<int>("requiredPersonnelid")
                        .HasColumnType("integer");

                    b.HasKey("receptionsid", "requiredPersonnelid");

                    b.HasIndex("requiredPersonnelid");

                    b.ToTable("JobTitleReception");
                });

            modelBuilder.Entity("Models.DayOff", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("VacationId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("VacationId");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("Models.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Models.Holiday", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Models.JobTitle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly?>("date")
                        .HasColumnType("date");

                    b.Property<int>("departmentid")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("startTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan>("time")
                        .HasColumnType("interval");

                    b.HasKey("id");

                    b.HasIndex("departmentid");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("WorkerId");

                    b.ToTable("Vacation");
                });

            modelBuilder.Entity("Models.WorkSchedule4Day", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("endOfWork")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("isWorking")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("startOfWork")
                        .HasColumnType("time without time zone");

                    b.HasKey("id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("WorkSchedule4Day");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("login")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Models.WorkerWorkSchedule4Day", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("endOfWork")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("isWorking")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("startOfWork")
                        .HasColumnType("time without time zone");

                    b.HasKey("id");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerWorkSchedule4Day");
                });

            modelBuilder.Entity("ReceptionWorker", b =>
                {
                    b.Property<int>("personnelid")
                        .HasColumnType("integer");

                    b.Property<int>("receptionsid")
                        .HasColumnType("integer");

                    b.HasKey("personnelid", "receptionsid");

                    b.HasIndex("receptionsid");

                    b.ToTable("ReceptionWorker");
                });

            modelBuilder.Entity("DepartmentWorker", b =>
                {
                    b.HasOne("Models.Department", null)
                        .WithMany()
                        .HasForeignKey("departmentsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("workersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleReception", b =>
                {
                    b.HasOne("Models.Reception", null)
                        .WithMany()
                        .HasForeignKey("receptionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("requiredPersonnelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.DayOff", b =>
                {
                    b.HasOne("Models.Vacation", "Vacation")
                        .WithMany("days")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.HasOne("Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.HasOne("Models.Worker", "Worker")
                        .WithMany("vacations")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Models.WorkSchedule4Day", b =>
                {
                    b.HasOne("Models.Department", "Department")
                        .WithMany("workSchedules")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.HasOne("Models.JobTitle", "jobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("jobTitle");
                });

            modelBuilder.Entity("Models.WorkerWorkSchedule4Day", b =>
                {
                    b.HasOne("Models.Worker", "Worker")
                        .WithMany("workSchedules")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("ReceptionWorker", b =>
                {
                    b.HasOne("Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("personnelid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Reception", null)
                        .WithMany()
                        .HasForeignKey("receptionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Department", b =>
                {
                    b.Navigation("workSchedules");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.Navigation("days");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.Navigation("vacations");

                    b.Navigation("workSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
