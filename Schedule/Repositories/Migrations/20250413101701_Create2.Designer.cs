// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413101701_Create2")]
    partial class Create2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.DayOff", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Vacationid")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("Vacationid");

                    b.ToTable("DayOff");
                });

            modelBuilder.Entity("Models.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Models.Holiday", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Models.JobTitle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Receptionid")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Receptionid");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("departmentid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("departmentid");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Workerid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Workerid");

                    b.ToTable("Vacation");
                });

            modelBuilder.Entity("Models.WorkSchedule4Day", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Departmentid")
                        .HasColumnType("integer");

                    b.Property<bool>("isWorking")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("Departmentid");

                    b.ToTable("WorkSchedule4Day");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Departmentid")
                        .HasColumnType("integer");

                    b.Property<int?>("Receptionid")
                        .HasColumnType("integer");

                    b.Property<int>("jobTitleid")
                        .HasColumnType("integer");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Departmentid");

                    b.HasIndex("Receptionid");

                    b.HasIndex("jobTitleid");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Models.DayOff", b =>
                {
                    b.HasOne("Models.Vacation", null)
                        .WithMany("days")
                        .HasForeignKey("Vacationid");
                });

            modelBuilder.Entity("Models.JobTitle", b =>
                {
                    b.HasOne("Models.Reception", null)
                        .WithMany("requiredPersonnel")
                        .HasForeignKey("Receptionid");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.HasOne("Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.HasOne("Models.Worker", null)
                        .WithMany("vacations")
                        .HasForeignKey("Workerid");
                });

            modelBuilder.Entity("Models.WorkSchedule4Day", b =>
                {
                    b.HasOne("Models.Department", null)
                        .WithMany("workSchedules")
                        .HasForeignKey("Departmentid");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.HasOne("Models.Department", null)
                        .WithMany("workers")
                        .HasForeignKey("Departmentid");

                    b.HasOne("Models.Reception", null)
                        .WithMany("personnel")
                        .HasForeignKey("Receptionid");

                    b.HasOne("Models.JobTitle", "jobTitle")
                        .WithMany()
                        .HasForeignKey("jobTitleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("jobTitle");
                });

            modelBuilder.Entity("Models.Department", b =>
                {
                    b.Navigation("workSchedules");

                    b.Navigation("workers");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.Navigation("personnel");

                    b.Navigation("requiredPersonnel");
                });

            modelBuilder.Entity("Models.Vacation", b =>
                {
                    b.Navigation("days");
                });

            modelBuilder.Entity("Models.Worker", b =>
                {
                    b.Navigation("vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
